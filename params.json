{"name":"Morse Tools","tagline":"An Open-Source program for transforming Morse codes to other forms like Binary bit streams or ASCII Texts","body":"# Morse Tool (GUI Frontend)\r\n\r\nThis is basically a conversion tool. It uses the library [libmorse.a](https://github.com/AKD92/Morse-Code-Conversion-Library) for all kinds of conversion and it is very convenient and easy to use. It is particularly useful if you wish to chnage your ASCII text to Morse code representation, Binary representation etc and the reverse is also supported.\r\n\r\n![Main Window](https://github.com/AKD92/Morse-Tool-GUI-Application/raw/master/scrn_1.png) ![](https://github.com/AKD92/Morse-Tool-GUI-Application/raw/master/scrn_2.png)\r\n\r\nThe aim of this open-source project is to design and offer a graphical frontend for my Morse Code Library [libmorse.a](https://github.com/AKD92/Morse-Code-Conversion-Library). The output of this project will be a stand-alone desktop application which can be used for conversion of morse code to other forms and vice versa.\r\n\r\n## Features:\r\n* ASCII Text to Morse code conversion\r\n* Morse Code to ASCII text conversion\r\n* Morse Code to Binary conversion\r\n* Binary to Morse Code conversion\r\n\r\nYou can download this application by clicking \"Download ZIP\" link. You can also build it from the source.\r\n\r\n## Project Background\r\nI should not forget to mention that, it is a byproduct of my **Digital System Design (DSD)** project \"Secret message tranmitter and receiver via Morse Code\". On that project, we were a group of 4 team members to develop a microcontroller based solution by which Morse code can be sent digitally from one place to another wirelessly, and at the receiver end the person will see the actual ASCII text of the message converted from sender's machine. Wireless transfer, Morse code input and conversion of Morse code to Binary and ASCII Text is done by the microcontroller we've used. I had to program that microcontroller (an **Arduino**) for morse conversion routines, and here this project is slightly modified version of that original work in order to bring broader range of capabilities and performance.\r\n\r\n## Code dependencies\r\n* [libbst.a](https://github.com/AKD92/Dictionary-ADT-by-BST) is standard C implementation of Dictionary data structure using Binary Search Tree (BST).\r\n* [libstackqueue.a](https://github.com/AKD92/Stack-and-Queue-ADT) is standard C implementation of Stack and Queue data structure.\r\n* [liblinkedlist.a](https://github.com/AKD92/Linked-List-ADT) is standard C implementation of Linked List data structure, including both singly and doubly versions.\r\n\r\nGraphical User Interface was built using [IUP](http://webserver2.tecgraf.puc-rio.br/iup/) Interface library, which is a multiplatform and portable user interface toolkit, freely available.\r\n\r\nThis application is compiled using GCC 4.8.2 32 bit (MinGW).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}